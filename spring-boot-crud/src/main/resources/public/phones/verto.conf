# http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax
input {
	file {	
		sincedb_path => "logstash.data"
		path => "C:/wamp/logs/ssl_request_log"
		start_position => "beginning"
	}
}



filter {

	grok {
		patterns_dir => "./patterns"
		match => [ "message", "\"%{DATA:date}\" \"%{DATA:referer}\" \"%{DATA:browser}\" %{IP:client} \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:status} (%{NUMBER:requestSize}|-) %{NUMBER:responseSize} %{NUMBER:performance}"]
	}

	date {
      match => ["date" , "YYYY-MM-dd HH:mm:ss"]
    }
	
	ruby {
             code => " event['@timestamp'] = event['@timestamp'].localtime('+01:00')"
    }
	
	mutate { 
		split => ["request", "?"]
	}
	
	mutate {
      add_field => { 
					"req" => "%{[request][0]}" 
					"reqParams" => "%{[request][1]}"
					}	
	}
		
	mutate {
      convert => [ "requestSize", "integer" ]
	}
	
	mutate {
      convert => [ "responseSize", "integer" ]
	}
	
	mutate {
      convert => [ "performance", "integer" ]
	}
	

	
	kv{
		field_split => "&"
		source => "reqParams"
	}
	
	uuid {  
		target => "uuid"
	}
	
	#http://dev.maxmind.com/geoip/legacy/geolite/#Downloads
	 geoip {
           source => "client"
           target => "geoip"
           fields => ["country_code2", "postal_code", "city_name", "latitude", "longitude"]
           database => "../conf/GeoLiteCity.dat"
    }  
	
	mutate {
		remove_field => [ "browser", "path", "reqParams", "request" ]
	}
	
	if [service]{
		mutate  {
			add_field => ["command", "%{service}_%{method}"]
		}
	}
	
	if [performance]{
		ruby  {
			code => "event['performance'] = event['performance']/1000"
		}
	}	

	
}



output {
    stdout {
    }
    elasticsearch {
        embedded => true
    }
}