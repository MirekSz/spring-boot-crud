package pl.streamsoft.verto;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.0
 * 2019-02-01T08:23:18.744+01:00
 * Generated source version: 3.3.0
 *
 */
@WebServiceClient(name = "good",
                  wsdlLocation = "http://localhost:8080/esb/services/catalog/?wsdl",
                  targetNamespace = "http://verto.streamsoft.pl")
public class Good extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://verto.streamsoft.pl", "good");
    public final static QName GoodWebServicePort = new QName("http://verto.streamsoft.pl", "GoodWebServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/esb/services/catalog/?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Good.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/esb/services/catalog/?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Good(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Good(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Good() {
        super(WSDL_LOCATION, SERVICE);
    }

    public Good(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Good(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Good(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns GoodWebService
     */
    @WebEndpoint(name = "GoodWebServicePort")
    public GoodWebService getGoodWebServicePort() {
        return super.getPort(GoodWebServicePort, GoodWebService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GoodWebService
     */
    @WebEndpoint(name = "GoodWebServicePort")
    public GoodWebService getGoodWebServicePort(WebServiceFeature... features) {
        return super.getPort(GoodWebServicePort, GoodWebService.class, features);
    }

}
